From 84c1794c4c574fb4b850d0cdaad64c4a8b42f4ca Mon Sep 17 00:00:00 2001
From: Frodo Lai <frodo_lai@bcmcom.com>
Date: Wed, 10 May 2017 12:35:27 -0700
Subject: [PATCH 06/12] Add NXP NFC NT3H1X01 based driver

Signed-off-by: Frodo Lai <frodo_lai@bcmcom.com>
---
 drivers/nfc/Kconfig                     |   1 +
 drivers/nfc/Makefile                    |   1 +
 drivers/nfc/nxp-nt3h1x01/Kconfig        |  12 +
 drivers/nfc/nxp-nt3h1x01/Makefile       |   6 +
 drivers/nfc/nxp-nt3h1x01/nt3h1x01_i2c.c | 502 ++++++++++++++++++++++++++++++++
 drivers/nfc/nxp-nt3h1x01/nt3h1x01_i2c.h |  43 +++
 6 files changed, 565 insertions(+)
 create mode 100755 drivers/nfc/nxp-nt3h1x01/Kconfig
 create mode 100755 drivers/nfc/nxp-nt3h1x01/Makefile
 create mode 100755 drivers/nfc/nxp-nt3h1x01/nt3h1x01_i2c.c
 create mode 100755 drivers/nfc/nxp-nt3h1x01/nt3h1x01_i2c.h

diff --git a/drivers/nfc/Kconfig b/drivers/nfc/Kconfig
index fe20e1c..cb331c1 100644
--- a/drivers/nfc/Kconfig
+++ b/drivers/nfc/Kconfig
@@ -60,4 +60,5 @@ source "drivers/nfc/pn544/Kconfig"
 source "drivers/nfc/microread/Kconfig"
 source "drivers/nfc/nfcmrvl/Kconfig"
 
+source "drivers/nfc/nxp-nt3h1x01/Kconfig"
 endmenu
diff --git a/drivers/nfc/Makefile b/drivers/nfc/Makefile
index 56ab822..602977e 100644
--- a/drivers/nfc/Makefile
+++ b/drivers/nfc/Makefile
@@ -10,5 +10,6 @@ obj-$(CONFIG_NFC_MEI_PHY)	+= mei_phy.o
 obj-$(CONFIG_NFC_SIM)		+= nfcsim.o
 obj-$(CONFIG_NFC_PORT100)	+= port100.o
 obj-$(CONFIG_NFC_MRVL)		+= nfcmrvl/
+obj-$(CONFIG_NFC_NXP_NT3H1X01)	+= nxp-nt3h1x01/
 
 ccflags-$(CONFIG_NFC_DEBUG) := -DDEBUG
diff --git a/drivers/nfc/nxp-nt3h1x01/Kconfig b/drivers/nfc/nxp-nt3h1x01/Kconfig
new file mode 100755
index 0000000..184b3b7
--- /dev/null
+++ b/drivers/nfc/nxp-nt3h1x01/Kconfig
@@ -0,0 +1,12 @@
+config NFC_NXP_NT3H1X01
+	tristate "NXP NT3H1X01 based driver"
+	depends on I2C
+	select CRC_CCITT
+	default n
+	---help---
+	  NXP NT3H1X01 driver based on I2C.
+	  This is a driver to provides I2C access to NT3H1101/1201 NFC Tag devices
+
+	  To compile this driver as a module, choose m here. The module will
+	  be called nt3h1x11_i2c.
+	  Say N if unsure.
diff --git a/drivers/nfc/nxp-nt3h1x01/Makefile b/drivers/nfc/nxp-nt3h1x01/Makefile
new file mode 100755
index 0000000..5244606
--- /dev/null
+++ b/drivers/nfc/nxp-nt3h1x01/Makefile
@@ -0,0 +1,6 @@
+#
+# Makefile for NXP-NCI NFC driver, NT3H1101/1201
+#
+
+nt3h1x01-y = nt3h1x01_i2c.o
+obj-$(CONFIG_NFC_NXP_NT3H1X01) += nt3h1x01.o
diff --git a/drivers/nfc/nxp-nt3h1x01/nt3h1x01_i2c.c b/drivers/nfc/nxp-nt3h1x01/nt3h1x01_i2c.c
new file mode 100755
index 0000000..0485101
--- /dev/null
+++ b/drivers/nfc/nxp-nt3h1x01/nt3h1x01_i2c.c
@@ -0,0 +1,502 @@
+/*
+ * Copyright (C) 2010 Trusted Logic S.A.
+ * modifications copyright (C) 2015 NXP B.V.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/list.h>
+#include <linux/i2c.h>
+#include <linux/irq.h>
+#include <linux/jiffies.h>
+#include <linux/uaccess.h>
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/miscdevice.h>
+#include <linux/spinlock.h>
+#include "nt3h1x01_i2c.h"
+#include <linux/of_gpio.h>
+#include <linux/regulator/consumer.h>
+#include <linux/of.h>
+
+#define MAX_BUFFER_SIZE	512
+
+#define MODE_OFF    0
+#define MODE_RUN    1
+#define MODE_FW     2
+
+/* Only NT3H1101/1201 are supported */
+#define CHIP "nt3h1x01"
+#define DRIVER_CARD "NTAG NT3H1x01"
+#define DRIVER_DESC "NTAG driver for NT3H1101/1201"
+
+#ifndef CONFIG_OF
+#define CONFIG_OF
+#endif
+
+struct nt3h1x01_dev	{
+	wait_queue_head_t read_wq;
+	struct mutex read_mutex;
+	struct i2c_client *client;
+	struct miscdevice nt3h1x01_device;
+	int irq_gpio;
+	bool irq_enabled;
+	spinlock_t irq_enabled_lock;
+};
+
+/**********************************************************
+ * Interrupt control and handler
+ **********************************************************/
+static void nt3h1x01_disable_irq(struct nt3h1x01_dev *nt3h1x01_dev)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&nt3h1x01_dev->irq_enabled_lock, flags);
+	if (nt3h1x01_dev->irq_enabled) {
+		disable_irq_nosync(nt3h1x01_dev->client->irq);
+		nt3h1x01_dev->irq_enabled = false;
+	}
+	spin_unlock_irqrestore(&nt3h1x01_dev->irq_enabled_lock, flags);
+}
+
+static irqreturn_t nt3h1x01_dev_irq_handler(int irq, void *dev_id)
+{
+	struct nt3h1x01_dev *nt3h1x01_dev = dev_id;
+
+	nt3h1x01_disable_irq(nt3h1x01_dev);
+
+	/* Wake up waiting readers */
+	wake_up(&nt3h1x01_dev->read_wq);
+
+	return IRQ_HANDLED;
+}
+
+/**********************************************************
+ * driver functions
+ **********************************************************/
+static ssize_t nt3h1x01_dev_read(struct file *filp, char __user *buf,
+		size_t count, loff_t *offset)
+{
+	struct nt3h1x01_dev *nt3h1x01_dev = filp->private_data;
+	char tmp[MAX_BUFFER_SIZE];
+	int ret;
+
+	if (count > MAX_BUFFER_SIZE)
+		count = MAX_BUFFER_SIZE;
+
+	pr_debug("%s : reading %zu bytes.\n", __func__, count);
+
+	mutex_lock(&nt3h1x01_dev->read_mutex);
+
+	if (!gpio_get_value(nt3h1x01_dev->irq_gpio)) {
+		if (filp->f_flags & O_NONBLOCK) {
+			ret = -EAGAIN;
+			goto fail;
+		}
+
+		while (1) {
+			nt3h1x01_dev->irq_enabled = true;
+			enable_irq(nt3h1x01_dev->client->irq);
+			ret = wait_event_interruptible(
+					nt3h1x01_dev->read_wq,
+					!nt3h1x01_dev->irq_enabled);
+
+			nt3h1x01_disable_irq(nt3h1x01_dev);
+
+			if (ret)
+				goto fail;
+
+			if (gpio_get_value(nt3h1x01_dev->irq_gpio))
+				break;
+
+			pr_warning("%s: spurious interrupt detected\n", __func__);
+		}
+	}
+
+	/* Write reg 01h */
+	tmp[0]=1;
+	ret = i2c_master_send(nt3h1x01_dev->client, tmp, 1);
+	if (ret != 1) {
+		pr_err("%s : i2c_master_send returned %d\n", __func__, ret);
+		ret = -EIO;
+	}
+
+	/* Read user data 01h */
+	ret = i2c_master_recv(nt3h1x01_dev->client, tmp, count);
+
+	mutex_unlock(&nt3h1x01_dev->read_mutex);
+
+	/* nt3h1x01 seems to be slow in handling I2C read requests
+	 * so add 1ms delay after recv operation */
+	udelay(1000);
+
+	if (ret < 0) {
+		pr_err("%s: i2c_master_recv returned %d\n", __func__, ret);
+		return ret;
+	}
+	if (ret > count) {
+		pr_err("%s: received too many bytes from i2c (%d)\n",
+			__func__, ret);
+		return -EIO;
+	}
+	if (copy_to_user(buf, tmp, ret)) {
+		pr_warning("%s : failed to copy to user space\n", __func__);
+		return -EFAULT;
+	}
+	return ret;
+
+fail:
+	mutex_unlock(&nt3h1x01_dev->read_mutex);
+	return ret;
+}
+
+static ssize_t nt3h1x01_dev_write(struct file *filp, const char __user *buf,
+		size_t count, loff_t *offset)
+{
+	struct nt3h1x01_dev  *nt3h1x01_dev;
+	char tmp[MAX_BUFFER_SIZE];
+	int ret;
+
+	pr_debug("%s : writing %zu bytes.\n", __func__, count);
+	return count;
+
+	nt3h1x01_dev = filp->private_data;
+
+	if (count > MAX_BUFFER_SIZE)
+		count = MAX_BUFFER_SIZE;
+
+	if (copy_from_user(tmp, buf, count)) {
+		pr_err("%s : failed to copy from user space\n", __func__);
+		return -EFAULT;
+	}
+
+	pr_debug("%s : writing %zu bytes.\n", __func__, count);
+	/* Write data */
+	ret = i2c_master_send(nt3h1x01_dev->client, tmp, count);
+	if (ret != count) {
+		pr_err("%s : i2c_master_send returned %d\n", __func__, ret);
+		ret = -EIO;
+	}
+
+	/* nt3h1x01 seems to be slow in handling I2C write requests
+	 * so add 1ms delay after I2C send oparation */
+	udelay(1000);
+
+	return ret;
+}
+
+static int nt3h1x01_dev_open(struct inode *inode, struct file *filp)
+{
+	struct nt3h1x01_dev *nt3h1x01_dev = container_of(filp->private_data,
+											   struct nt3h1x01_dev,
+											   nt3h1x01_device);
+
+	filp->private_data = nt3h1x01_dev;
+
+	pr_debug("%s : %d,%d\n", __func__, imajor(inode), iminor(inode));
+
+	return 0;
+}
+
+static int nt3h1x01_dev_release(struct inode *inode, struct file *filp)
+{
+	// struct nt3h1x01_dev *nt3h1x01_dev = container_of(filp->private_data,
+	//										   struct nt3h1x01_dev,
+	//										   nt3h1x01_device);
+
+	pr_debug("%s : closing %d,%d\n", __func__, imajor(inode), iminor(inode));
+
+	return 0;
+}
+
+static long  nt3h1x01_dev_ioctl(struct file *filp, unsigned int cmd,
+				unsigned long arg)
+{
+	struct nt3h1x01_dev *nt3h1x01_dev = filp->private_data;
+
+	pr_debug("%s, cmd=%d, arg=%lu\n", __func__, cmd, arg);
+	switch (cmd) {
+	default:
+		pr_err("%s bad ioctl %u\n", __func__, cmd);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static const struct file_operations nt3h1x01_dev_fops = {
+	.owner	= THIS_MODULE,
+	.llseek	= no_llseek,
+	.read	= nt3h1x01_dev_read,
+	.write	= nt3h1x01_dev_write,
+	.open	= nt3h1x01_dev_open,
+	.release  = nt3h1x01_dev_release,
+	.unlocked_ioctl  = nt3h1x01_dev_ioctl,
+};
+
+
+/*
+ * Handlers for alternative sources of platform_data
+ */
+#ifdef CONFIG_OF
+/*
+ * Translate OpenFirmware node properties into platform_data
+ */
+static int nt3h1x01_get_pdata(struct device *dev,
+							struct nt3h1x01_i2c_platform_data *pdata)
+{
+	struct device_node *node;
+	u32 flags;
+	int val;
+
+	/* make sure there is actually a device tree node */
+	node = dev->of_node;
+	if (!node)
+		return -ENODEV;
+
+	memset(pdata, 0, sizeof(*pdata));
+
+	/* read the dev tree data */
+
+	/* irq pin - data available irq - REQUIRED */
+	val = of_get_named_gpio_flags(node, "interrupt-gpios", 0, &flags);
+	if (val >= 0) {
+		pdata->irq_gpio = val;
+	}
+	else {
+		dev_err(dev, "IRQ GPIO error getting from OF node\n");
+		return val;
+	}
+
+	return 0;
+}
+#else
+static int nt3h1x01_get_pdata(struct device *dev,
+							struct nt3h1x01_i2c_platform_data *pdata)
+{
+	pdata = dev->platform_data;
+	return 0;
+}
+#endif
+
+
+/*
+ * nt3h1x01_probe
+ */
+#ifdef KERNEL_3_4_AND_OLDER
+ static int __devinit nt3h1x01_probe(struct i2c_client *client,
+		const struct i2c_device_id *id)
+#else
+static int nt3h1x01_probe(struct i2c_client *client,
+		const struct i2c_device_id *id)
+#endif
+{
+	int ret;
+	struct nt3h1x01_i2c_platform_data *pdata; // gpio values, from board file or DT
+	struct nt3h1x01_i2c_platform_data tmp_pdata;
+	struct nt3h1x01_dev *nt3h1x01_dev; // internal device specific data
+
+	pr_info("%s\n", __func__);
+
+	/* ---- retrieve the platform data ---- */
+	/* If the dev.platform_data is NULL, then */
+	/* attempt to read from the device tree */
+	if(!client->dev.platform_data)
+	{
+		ret = nt3h1x01_get_pdata(&(client->dev), &tmp_pdata);
+		if(ret){
+			return ret;
+		}
+
+		pdata = &tmp_pdata;
+	}
+	else
+	{
+		pdata = client->dev.platform_data;
+	}
+
+	if (pdata == NULL) {
+		pr_err("%s : nfc probe fail\n", __func__);
+		return  -ENODEV;
+	}
+
+	/* validate the the adapter has basic I2C functionality */
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		pr_err("%s : need I2C_FUNC_I2C\n", __func__);
+		return  -ENODEV;
+	}
+
+	/* reserve the GPIO pins */
+	pr_info("%s: request irq_gpio %d\n", __func__, pdata->irq_gpio);
+	ret = gpio_request(pdata->irq_gpio, "nfc_int");
+	if (ret){
+		pr_err("%s :not able to get GPIO irq_gpio\n", __func__);
+		return  -ENODEV;
+	}
+	ret = gpio_to_irq(pdata->irq_gpio);
+	if (ret < 0){
+		pr_err("%s :not able to map GPIO irq_gpio to an IRQ\n", __func__);
+		goto err_exit;
+	}
+	else{
+		client->irq = ret;
+	}
+
+	/* allocate the nt3h1x01 driver information structure */
+	nt3h1x01_dev = kzalloc(sizeof(*nt3h1x01_dev), GFP_KERNEL);
+	if (nt3h1x01_dev == NULL) {
+		dev_err(&client->dev, "failed to allocate memory for module data\n");
+		ret = -ENOMEM;
+		goto err_exit;
+	}
+
+	/* store the platform data in the driver info struct */
+	nt3h1x01_dev->irq_gpio = pdata->irq_gpio;
+
+	nt3h1x01_dev->client = client;
+
+	/* finish configuring the I/O */
+	ret = gpio_direction_input(nt3h1x01_dev->irq_gpio);
+	if (ret < 0) {
+		pr_err("%s :not able to set irq_gpio as input\n", __func__);
+		goto err_exit;
+	}
+
+	/* init mutex and queues */
+	init_waitqueue_head(&nt3h1x01_dev->read_wq);
+	mutex_init(&nt3h1x01_dev->read_mutex);
+	spin_lock_init(&nt3h1x01_dev->irq_enabled_lock);
+
+	/* register as a misc device - character based with one entry point */
+	nt3h1x01_dev->nt3h1x01_device.minor = MISC_DYNAMIC_MINOR;
+	nt3h1x01_dev->nt3h1x01_device.name = CHIP;
+	nt3h1x01_dev->nt3h1x01_device.fops = &nt3h1x01_dev_fops;
+	ret = misc_register(&nt3h1x01_dev->nt3h1x01_device);
+	if (ret) {
+		pr_err("%s : misc_register failed\n", __FILE__);
+		goto err_exit;
+	}
+
+	/* request irq.  the irq is set whenever the chip has data available
+	 * for reading.  it is cleared when all data has been read.
+	 */
+	pr_info("%s : requesting IRQ %d\n", __func__, client->irq);
+	nt3h1x01_dev->irq_enabled = true;
+	ret = request_irq(client->irq, nt3h1x01_dev_irq_handler,
+				IRQF_TRIGGER_RISING, client->name, nt3h1x01_dev);
+	if (ret) {
+		dev_err(&client->dev, "request_irq failed\n");
+		goto err_request_irq_failed;
+	}
+	nt3h1x01_disable_irq(nt3h1x01_dev);
+
+	i2c_set_clientdata(client, nt3h1x01_dev);
+
+	dev_err(&client->dev, "Initiated!\n");
+	return 0;
+
+err_request_irq_failed:
+	misc_deregister(&nt3h1x01_dev->nt3h1x01_device);
+err_exit:
+	gpio_free(pdata->irq_gpio);
+	return ret;
+}
+
+#ifdef KERNEL_3_4_AND_OLDER
+static int __devexit nt3h1x01_remove(struct i2c_client *client)
+#else
+static int nt3h1x01_remove(struct i2c_client *client)
+#endif
+{
+	struct nt3h1x01_dev *nt3h1x01_dev;
+
+	pr_info("%s\n", __func__);
+
+	nt3h1x01_dev = i2c_get_clientdata(client);
+	free_irq(client->irq, nt3h1x01_dev);
+	misc_deregister(&nt3h1x01_dev->nt3h1x01_device);
+	mutex_destroy(&nt3h1x01_dev->read_mutex);
+	gpio_free(nt3h1x01_dev->irq_gpio);
+
+	kfree(nt3h1x01_dev);
+
+	return 0;
+}
+
+/*
+ *
+ */
+#ifdef CONFIG_OF
+static struct of_device_id nt3h1x01_dt_match[] = {
+	{ .compatible = "nxp,nt3h1x01", },
+	{ .compatible = "nxp,nt3h1101", },
+	{ .compatible = "nxp,nt3h1201", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, nt3h1x01_dt_match);
+#endif
+
+static const struct i2c_device_id nt3h1x01_id[] = {
+	{ "nt3h1x01", 0 },
+	{ },
+};
+MODULE_DEVICE_TABLE(i2c, nt3h1x01_id);
+
+static struct i2c_driver nt3h1x01_driver = {
+	.id_table	= nt3h1x01_id,
+	.probe		= nt3h1x01_probe,
+#ifdef KERNEL_3_4_AND_OLDER
+	.remove		= __devexit_p(nt3h1x01_remove),
+#else
+	.remove		= nt3h1x01_remove,
+#endif
+	.driver		= {
+		.owner	= THIS_MODULE,
+		.name	= "nt3h1x01",
+		.of_match_table = nt3h1x01_dt_match,
+	},
+};
+
+/*
+ * module load/unload record keeping
+ */
+
+static int __init nt3h1x01_dev_init(void)
+{
+	pr_info("%s\n", __func__);
+	return i2c_add_driver(&nt3h1x01_driver);
+}
+
+static void __exit nt3h1x01_dev_exit(void)
+{
+	pr_info("%s\n", __func__);
+	i2c_del_driver(&nt3h1x01_driver);
+}
+
+module_init(nt3h1x01_dev_init);
+module_exit(nt3h1x01_dev_exit);
+
+MODULE_AUTHOR("Oliver Kuo");
+MODULE_DESCRIPTION(DRIVER_DESC);
+MODULE_LICENSE("GPL");
diff --git a/drivers/nfc/nxp-nt3h1x01/nt3h1x01_i2c.h b/drivers/nfc/nxp-nt3h1x01/nt3h1x01_i2c.h
new file mode 100755
index 0000000..f36d5a7
--- /dev/null
+++ b/drivers/nfc/nxp-nt3h1x01/nt3h1x01_i2c.h
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2010 Trusted Logic S.A.
+ * modifications copyright (C) 2015 NXP B.V.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#define NT3H1X01_MAGIC	0xE9
+
+/*
+ * NT3H1X01 power control via ioctl
+ * NT3H1X01_SET_PWR(0): power off
+ * NT3H1X01_SET_PWR(1): power on
+ * NT3H1X01_SET_PWR(2): reset and power on with firmware download enabled
+ */
+
+#define PWR_OFF 0
+#define PWR_ON  1
+#define PWR_FW  2
+
+#define CLK_OFF 0
+#define CLK_ON  1
+
+#define GPIO_UNUSED -1
+
+#define NT3H1X01_SET_PWR	_IOW(NT3H1X01_MAGIC, 0x01, unsigned int)
+#define NT3H1X01_CLK_REQ	_IOW(NT3H1X01_MAGIC, 0x02, unsigned int)
+
+struct nt3h1x01_i2c_platform_data {
+	unsigned int irq_gpio;
+};
-- 
2.7.4

